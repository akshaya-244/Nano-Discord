// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile{
  id String @id @default(uuid())
  userId String @unique
  imageUrl String @db.Text @default("")
  name String
  email String @db.Text
  channels Channel[]
  servers Server[]
  members Member[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members Member[]
  channels Channel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}
model Member{
  id String @id  @default(uuid())
  role MemberRole @default(GUEST)
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conversationIntiated  Conversations[] @relation("MemberOne")
  conversationRecieved  Conversations[] @relation("MemberTwo")

  directMessages DirectMessage[]
  @@index([profileId])
  @@index([serverId])
}

enum ChannelType{
TEXT
AUDIO
VIDEO  
}

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  @@index([profileId])
  @@index([serverId])


}

model Message{
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])


}

model Conversations{
  id String @id @default(uuid())

   memberOneId String
   memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
   memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])

  directMessages DirectMessage[]

}

model DirectMessage{
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([conversationId])
  @@index([memberId])
}